{"remainingRequest":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/src/views/curso/Tema3.vue?vue&type=template&id=3166e056&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/src/views/curso/Tema3.vue","mtime":1742511497275},{"path":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Inteligencia-de-negocios-/U3_Inteligencia-de-negocios-/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}